<script>
  document.addEventListener('DOMContentLoaded', function () {
    const detailModal = document.getElementById('medicationDetailModal');

    if (!detailModal) {
      console.error('Elemen modal tidak ditemukan!');
      return;
    }

    const modalInstance = new bootstrap.Modal(detailModal);

    detailModal.addEventListener('show.bs.modal', async function (event) {
      try {
        const medicationName = event.relatedTarget;

        if (!medicationName) {
          console.error('Elemen related target tidak ditemukan!');
          return;
        }

        const uuid = medicationName.getAttribute('data-uuid');

        if (!uuid) {
          console.error('UUID obat pasien tidak ditemukan!');
          return;
        }

        const modalBody = detailModal.querySelector('.modal-body');
        if (modalBody) {
          modalBody.innerHTML = `
          <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Mengambil data obat...</p>
          </div>
        `;
        }

        const response = await fetch(`/obat-pasien/${uuid}/detail`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.message || 'Gagal mengambil data obat');
        }

        const data = result.data;

        detailModal.innerHTML = document.getElementById('detailModalTemplate').innerHTML;

        const isBeforeMeal = data.isBeforeMeal;
        const themeColor = isBeforeMeal ? 'primary' : 'secondary';

        const modalHeader = detailModal.querySelector('.modal-header');
        const divider = detailModal.querySelector('hr');
        const categoryBadge = detailModal.querySelector('.modal-medication-category');
        const iconContainers = detailModal.querySelectorAll('.rounded-circle');
        const editButton = detailModal.querySelector('.modal-edit-button');

        if (modalHeader) modalHeader.className = `modal-header bg-${themeColor} text-white`;
        if (divider) divider.className = `text-${themeColor} opacity-100 mt-2 mb-1`;
        if (categoryBadge) categoryBadge.className = `badge rounded-pill bg-${themeColor} bg-opacity-25 text-white modal-medication-category px-3 py-2 fs-6`;

        iconContainers.forEach(container => {
          container.className = `bg-${themeColor} bg-opacity-10 text-white rounded-circle p-3 me-3 d-flex align-items-center justify-content-center`;
        });

        if (editButton) editButton.className = `btn btn-${themeColor} modal-edit-button`;

        const nameElement = detailModal.querySelector('.modal-medication-name');
        const doseElement = detailModal.querySelector('.modal-medication-dose');
        const frequencyElement = detailModal.querySelector('.modal-medication-frequency');
        const scheduleElement = detailModal.querySelector('.modal-medication-schedule');
        const batasElement = detailModal.querySelector('.modal-medication-batas');
        const statusElement = detailModal.querySelector('.modal-medication-status');

        if (nameElement) nameElement.textContent = data.obat.nama || 'N/A';
        if (categoryBadge) categoryBadge.textContent = data.keteranganWaktu || 'N/A';
        if (doseElement) doseElement.textContent = data.obat.dosis ? `${data.obat.dosis} mg` : 'N/A';
        if (frequencyElement) frequencyElement.textContent = data.frekuensi ? `${data.frekuensi}x sehari` : 'N/A';
        if (statusElement) statusElement.textContent = data.status ? 'Aktif' : 'Tidak Aktif';
        if (batasElement) batasElement.textContent = data.batasWaktu ? formatTimestamp(data.batasWaktu) : '';



        if (scheduleElement) {
          scheduleElement.innerHTML = '';

          if (data.waktuKonsumsi && data.waktuKonsumsi.length > 0) {
            data.waktuKonsumsi.forEach(waktu => {
              if (waktu && waktu.trim() !== '') {
                const timeCol = document.createElement('div');
                timeCol.className = 'col-auto mb-2';

                const timeTag = document.createElement('div');
                timeTag.className = `d-flex align-items-center justify-content-left bg-${themeColor} bg-opacity-10 text-white px-3 py-2 rounded-pill`;
                timeTag.innerHTML = `<i class="far fa-clock me-2"></i>${waktu}`;

                timeCol.appendChild(timeTag);
                scheduleElement.appendChild(timeCol);
              }

            });
            if (data.batasWaktu) {
              const batasWaktuCol = document.createElement('div');
              batasWaktuCol.className = 'col-auto mb-2';

              const batasWaktuTag = document.createElement('div');
              batasWaktuTag.className = `d-flex align-items-center justify-content-left bg-${themeColor} bg-opacity-10 text-white px-3 py-2 rounded-pill`;
              batasWaktuTag.innerHTML = `<i class="far fa-calendar me-2"></i>${formatTimestamp(data.batasWaktu)}`;

              batasWaktuCol.appendChild(batasWaktuTag);
              scheduleElement.appendChild(batasWaktuCol);
            }
            if (data.status) {
              const batasWaktuCol = document.createElement('div');
              batasWaktuCol.className = 'col-auto mb-2';

              const batasWaktuTag = document.createElement('div');
              batasWaktuTag.className = `d-flex align-items-center justify-content-left bg-${themeColor} bg-opacity-10 text-white px-3 py-2 rounded-pill`;
              batasWaktuTag.innerHTML = `<i class="far fa-${data.status == true ? 'check' : 'times'}-circle me-2"></i>${data.status == true ? 'Aktif' : 'Tidak Aktif'}`;

              batasWaktuCol.appendChild(batasWaktuTag);
              scheduleElement.appendChild(batasWaktuCol);
            }
          }



          if (scheduleElement.children.length === 0) {
            const timeCol = document.createElement('div');
            timeCol.className = 'col-12 text-center';
            timeCol.innerHTML = '<p class="text-muted">Tidak ada jadwal yang ditentukan</p>';
            scheduleElement.appendChild(timeCol);
          }
        }

        if (editButton) {
          editButton.onclick = function () {
            const editSpan = document.querySelector(`.edit-obat[data-uuid="${uuid}"]`);
            const modalInstance = bootstrap.Modal.getInstance(detailModal);

            if (modalInstance) {
              modalInstance.hide();

              setTimeout(() => {
                if (editSpan) {
                  editSpan.click();
                } else {
                  console.error('Tombol edit dengan UUID', uuid, 'tidak ditemukan');
                }
              }, 400);
            }
          };
        }

      } catch (error) {
        console.error('Error saat menyiapkan modal detail obat:', error);

        const modalBody = detailModal.querySelector('.modal-body');
        if (modalBody) {
          modalBody.innerHTML = `
          <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Terjadi kesalahan saat mengambil detail obat. Silakan coba lagi.
          </div>
        `;
        }
      }
    });

    detailModal.addEventListener('hidden.bs.modal', function () {
    });
  });
</script>