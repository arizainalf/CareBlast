<style>
  .time-inputs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 0.5rem;
  }

  .time-inputs-grid .input-group {
    margin-bottom: 0.5rem;
  }

  .time-inputs-grid .form-label {
    font-size: 0.85rem;
    margin-bottom: 0.25rem;
  }

  @media (max-width: 576px) {
    .time-inputs-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const frequencySelect = document.getElementById("frequency-select");
    const timeInputsContainer = document.getElementById("time-inputs");
    const editButtons = document.querySelectorAll(".edit-obat");
    const modalTitle = document.querySelector("#basicModal .modal-title");
    const saveButton = document.getElementById("save-edit-obat");
    const editObatUuidInput = document.getElementById("edit-obat-uuid");
    const editKeteranganWaktu = document.getElementById("edit-keterangan-waktu");
    let currentObatUuid = null;

    if (frequencySelect) {
      frequencySelect.addEventListener("change", function () {
        updateTimeInputs(parseInt(this.value, 10));
      });
    }

    function updateTimeInputs(frequency, times = []) {
      timeInputsContainer.innerHTML = "";

      const normalizedTimes = Array.isArray(times) ? times : [times];

      for (let i = 0; i < frequency; i++) {
        const defaultTime = normalizedTimes[i] || "";

        const inputGroup = document.createElement("div");
        inputGroup.classList.add("input-group");

        inputGroup.innerHTML = `
        <div class="w-100">
          <label class="form-label">Jam ke-${i + 1}</label>
          <div class="input-group clockpicker" data-autoclose="true">
            <input type="text" class="form-control clockpicker-input"
                   value="${defaultTime}"
                   name="waktu[]"
                   placeholder="Pilih waktu"
                   required>
            <span class="input-group-text"><i class="far fa-clock"></i></span>
          </div>
          <div class="invalid-feedback">Waktu tidak boleh kosong</div>
        </div>
      `;

        timeInputsContainer.appendChild(inputGroup);
      }

      setTimeout(() => {
        $(".clockpicker-input").clockpicker({
          autoclose: true
        });
      }, 100);
    }

    editButtons.forEach(button => {
      button.addEventListener("click", function () {
        const obatUuid = this.getAttribute("data-uuid");
        const obatNama = this.getAttribute("data-nama");
        const frekuensi = parseInt(this.getAttribute("data-frekuensi"), 10);
        const waktuStr = this.getAttribute("data-waktu");
        const keteranganWaktu = this.getAttribute("data-keterangan-waktu");

        let waktuArray = [];
        if (typeof waktuStr === 'string') {
          try {
            waktuArray = JSON.parse(waktuStr);
          } catch (e) {
            waktuArray = waktuStr.includes(',')
              ? waktuStr.split(',').map(time => time.trim())
              : [waktuStr.trim()];
          }
        }

        waktuArray = waktuArray.filter(time => time && typeof time === 'string');

        if (modalTitle) {
          modalTitle.textContent = `Edit Obat ${obatNama}`;
        }

        if (editObatUuidInput) {
          editObatUuidInput.value = obatUuid;
        }

        if (editKeteranganWaktu) {
          editKeteranganWaktu.value = keteranganWaktu;
        }

        if (frequencySelect) {
          frequencySelect.value = frekuensi;
        }

        if (frequencySelect) {
          updateTimeInputs(frekuensi, waktuArray);
        }
        currentObatUuid = obatUuid;
      });
    });

    if (saveButton) {
      saveButton.addEventListener("click", function () {
        const obatUuid = editObatUuidInput
          ? editObatUuidInput.value
          : currentObatUuid;

        if (!obatUuid) {
          alert('Error: ID obat tidak ditemukan');
          return;
        }

        const frekuensi = frequencySelect.value;
        const keteranganWaktu = editKeteranganWaktu.value;
        const timeInputs = document.querySelectorAll("input[name='waktu[]']");

        let isValid = true;
        timeInputs.forEach(input => {
          if (!input.value.trim()) {
            input.classList.add('is-invalid');
            isValid = false;
          } else {
            input.classList.remove('is-invalid');
          }
        });

        if (!isValid) {
          alert('Harap isi semua waktu konsumsi');
          return;
        }

        const waktuArray = Array.from(timeInputs).map(input => input.value);
        const csrfToken = document.querySelector('input[name="_csrf"]').value;

        fetch(`/obat-pasien/${obatUuid}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-TOKEN': csrfToken
          },
          body: JSON.stringify({
            frekuensi,
            keteranganWaktu,
            waktu: waktuArray
          })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const modal = bootstrap.Modal.getInstance(document.getElementById('basicModal'));
              modal.hide();
              window.location.reload();
            } else {
              alert('Error: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Terjadi kesalahan saat menyimpan data');
          });
      });
    }
  });
</script>
