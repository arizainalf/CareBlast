<script>
    let statusCheckInterval = null;

    async function loadQRCode() {
        try {
            const response = await axios.get('/qrcode');
            if (response.data.success === true) {
                if (response.data.qrCode === 'You are already logged in') {
                    handleConnected();
                } else {
                    document.getElementById('qrCode').src = `data:image/png;base64,${response.data.qrCode}`;
                    document.getElementById('qrCode').style.display = 'block';
                    document.getElementById('logoutBtn').style.display = 'none';
                    startStatusCheck();
                }
            }
        } catch (error) {
            console.error('Error loading QR code:', error);
            showDisconnected('Failed to load QR code. Please try again.');
        }
    }

    async function checkStatus() {
        try {
            const response = await axios.get('/status');
            if (response.data.success === true) {
                if (response.data.connected === 'open') {
                    handleConnected();
                    stopStatusCheck();
                } else {
                    showDisconnected('Waiting for connection...');
                }
            }
        } catch (error) {
            console.error('Error checking status:', error);
        }
    }

    function handleConnected() {
        document.getElementById('qrCode').style.display = 'none';
        document.getElementById('status').className = 'alert alert-success text-center fs-15 mb-4';
        document.getElementById('status').textContent = 'Terkoneksi Dengan WhatsApp!';
        document.getElementById('logoutBtn').style.display = 'block';
    }

    function showDisconnected(message) {
        document.getElementById('status').className = 'alert alert-info text-center fs-15 mb-4';
        document.getElementById('status').textContent = message;
        document.getElementById('qrCode').style.display = 'block';
        document.getElementById('logoutBtn').style.display = 'none';
    }

    function startStatusCheck() {
        if (!statusCheckInterval) {
            statusCheckInterval = setInterval(checkStatus, 5000);
        }
    }

    function stopStatusCheck() {
        if (statusCheckInterval) {
            clearInterval(statusCheckInterval);
            statusCheckInterval = null;
        }
    }

    async function refreshQR() {
        loadQRCode();
    }
    
    async function logout() {
        const logoutBtn = document.getElementById('logoutBtn');
        const originalText = logoutBtn.innerHTML;

        try {
            logoutBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Logging out...';
            logoutBtn.disabled = true;

            const response = await axios.get('logoutWhatsapp');

            if (response.data.success === true) {
                showDisconnected('Logged out successfully');
                setTimeout(() => {
                    loadQRCode();
                }, 1000);
            } else {
                throw new Error(response.data.message || 'Logout failed');
            }
        } catch (error) {
            console.error('Error during logout:', error);
            showDisconnected(error.response?.data?.message || 'Logout failed. Please try again.');
        } finally {
            logoutBtn.innerHTML = originalText;
            logoutBtn.disabled = false;
        }
    }

    function animateCounter(elementId, endValue, duration = 2000) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const startValue = 0;
        const frameDuration = 1000 / 60;
        const totalFrames = Math.round(duration / frameDuration);
        const valueIncrement = endValue / totalFrames;

        let currentValue = startValue;
        let frame = 0;

        function easeOutQuad(t) {
            return t * (2 - t);
        }

        const counter = setInterval(() => {
            frame++;
            const progress = easeOutQuad(frame / totalFrames);
            currentValue = startValue + (endValue * progress);

            if (frame === totalFrames) {
                clearInterval(counter);
                element.textContent = endValue.toLocaleString('id-ID');
                element.classList.add('counter-finished');

                setTimeout(() => {
                    element.classList.remove('counter-finished');
                }, 500);
            } else {
                element.textContent = Math.floor(currentValue).toLocaleString('id-ID');
            }
        }, frameDuration);
    }

    function initCounters() {
    const counters = [
    { id: 'pasienBaruCounter', value: {{ pasienBaruCount }}, duration: 1500 },
    { id: 'totalPasienCounter', value: {{ totalPasien }}, duration: 2000 },
    { id: 'totalObatCounter', value: {{ totalObat }}, duration: 1700 },
    { id: 'penyakitCounter', value: {{ penyakitTerbanyak.pasien_count || 0 }}, duration: 1600 }
    ];

    counters.forEach((counter, index) => {
        setTimeout(() => {
            animateCounter(counter.id, counter.value, counter.duration);
        }, index * 100); // Delay 100ms antar counter
    });
  }
</script>